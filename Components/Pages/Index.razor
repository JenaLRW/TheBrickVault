@using TheBrickVault.Components.Services
@using TheBrickVault.Core.Models



@page "/"
@* @inject LegoSetService LegoSetService*@
@inject RebrickableService RebrickableService


<h3>The Brick Vault</h3>
<h5>Jena White's Capstone Project</h5>
<h5>Code:You, August 2024 Cohort</h5>

<img src="images/Thebrickvaultlogo.png" alt="image of a chest full of colorful bricks" style="width: 200px; 
height: auto; place-content: left; padding: 10px;"/>


<h6> Search Lego Sets </h6>

<InputText @bind-Value="searchQuery" placeholder="Search by Set Number or Name" class="form-control" />
<button class="btn btn-primary" @onclick="SearchLegoSets" style="margin: 10px;">Search</button>

@if (legoSets != null && legoSets.Count > 0)
{
    <table class="table mt-3">
        <thead>
            <tr>
                <th>Set Number</th>
                <th>Name</th>
                <th>Number of Pieces</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var legoSet in legoSets)
            {
                <tr>
                    <td>@legoSet.set_num</td>
                    <td>@legoSet.name</td>
                    <td>@legoSet.num_parts</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<RebrickableLegoSet> legoSets = new List<RebrickableLegoSet>();
    private string searchQuery;
    
    private async Task SearchLegoSets()
    {
        if (!string.IsNullOrWhiteSpace(searchQuery))
        {
            legoSets = await RebrickableService.SearchLegoSetsAsync(searchQuery);
        }
        else
        {
            legoSets.Clear();
        }
}



@* old design, going with something else but holding on to this in case new design is a fail.
@if (LegoSetService == null)
{
<p>Loading...</p>
}
else if (LegoSets == null)
{
    <p>No Lego sets found. </p>
}
else
{ 


<table class="table">
    <thead>
                <tr>
            <th scope="col">Set Number</th>
            <th scope="col">Name</th>
            <th scope="col">Number of Pieces</th>
        </tr>
    </thead>
    <tbody>
            @foreach (var legoSet in LegoSets)
            {
                <tr>
                    <td>@legoSet.SetNum</td>
                    <td>@legoSet.Name</td>
                    <td>@legoSet.PieceCount</td>
                </tr>
            }
    </tbody>
</table> 
    <h3>Lego Sets</h3>
    <table class="table">
        <thead>
            <tr>
                <th>Set Number</th>
                <th>Name</th>
                <th>Number of Pieces</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var set in LegoSets)
            {
                <tr>
                    <td>@set.SetNum</td>
                    <td>@set.Name</td>
                    <td>@set.PieceCount</td>
                </tr>
            }
        </tbody>
    </table>
}
<h3>Add New Lego Set</h3>
<EditForm Model="@newLegoSet" OnValidSubmit="@AddLegoSetAsync">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="form-group">
        <label for="setNumber">Set Number:</label>
        <InputText id="setNum" class="form-control" @bind-Value="@newLegoSet.SetNum" />
    </div>
    <div class="form-group">
        <label for="name">Name:</label>
        <InputText id="name" class="form-control" @bind-Value="@newLegoSet.Name" />
    </div>
    <div class="form-group">
        <label for="numberOfPieces">Number of Pieces:</label>
        <InputNumber id="pieceCount" class="form-control" @bind-Value="@newLegoSet.PieceCount" />
    </div>
    need to add some padding
    <button type="submit" class="btn btn-primary">Add Lego Set</button>
    </EditForm>

 @code {
    
    
    private LegoSet newLegoSet = new LegoSet();
    private List<LegoSet> LegoSets = new();

  

    protected override async Task OnInitializedAsync()
    {
        LegoSets = await LegoSetService.GetLegoSetsAsync();
    }
    private async Task AddLegoSetAsync()
    {
        Console.WriteLine($"Adding LegoSet - Name: {newLegoSet.Name}, SetNum: {newLegoSet.SetNum}, Pieces: {newLegoSet.PieceCount}");
        await LegoSetService.AddLegoSetAsync(newLegoSet);
        newLegoSet = new LegoSet(); // Reset the form
        LegoSets = await LegoSetService.GetLegoSetsAsync(); // Refresh the list
    }*@
 }
 