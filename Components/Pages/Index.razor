@using TheBrickVault.Components.Services
@using TheBrickVault.Core.Models
@using TheBrickVault.Infrastructure.Data
@using TheBrickVault.Core.DTO


@page "/"
@rendermode InteractiveServer
@inject LegoDbContext DbContext
@inject RebrickableService RebrickableService


<h3>The Brick Vault</h3>
<h6>Jena White's Capstone Project</h6>
<h6>Code:You, August 2024 Cohort</h6>

<img src="images/Thebrickvaultlogo.png" alt="image of a chest full of colorful bricks" style="width: 200px; 
height: auto; place-content: left; padding: 10px;"/>


<h4> Search Lego Sets </h4>

<InputText @bind-Value="searchQuery" placeholder="Search by Set Number or Name" class="form-control" />

<button class="btn btn-primary" @onclick="SearchLegoSets" style="margin: 10px;">Search</button>


@if (isLoadingSearch)
{
    <p>Loading sets, please wait...</p>
}

else if (hasSearched && setsWithParts.Count == 0)
{
    <p>No Lego sets found.</p>
}
else if (hasSearched && setsWithParts.Count > 0)
{

    <table class="table mt-3">
        <thead>
            <tr>
                <th>Save</th>
                <th>Set Number</th>
                <th>Name</th>
                <th>Number of Pieces</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var setWithParts in setsWithParts)
            {
                <tr>
                    <td>
                        <button @onclick="() => SaveLegoSet(setWithParts)" class="btn btn-success btn-sm">
                            <i class="bi bi-save"></i> 

                        </button>
                    </td>
                    <td>@setWithParts.Set.set_num</td>
                    <td>@setWithParts.Set.name</td>
                    <td>@setWithParts.Set.num_parts</td>
                </tr>
            }
        </tbody>
    </table>
    @if (hasMoreSets)
    {        
        <button class="btn btn-secondary" @onclick="async () => await LoadMoreSets()" style="margin: 10px;">Load More</button>
    }
    else
    {
        <p>End of search.</p>
    }
}





<hr style="border: 1px solid; margin: 20px 0;" />

<h4> Your Lego Sets</h4>

@if (userLegoSets != null && userLegoSets.Count > 0)
{
    <table class="table mt-3">
        <thead>
            <tr>
                <th>Delete Set</th>
                <th>Set Number</th>
                <th>Name</th>
                <th>Number of Pieces</th>
            </tr>
        </thead>

        <tbody>
            @foreach (var legoSet in userLegoSets)
            {

                <tr>
                    <td>
                        <button @onclick="() => DeleteLegoSet(legoSet)" class="btn btn-danger">
                            <i class="bi bi-trash"></i>

                        </button>
                    </td>
                    <td>@legoSet.SetNum</td>
                    <td>@legoSet.Name</td>
                    <td>@legoSet.PieceCount</td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <p>No Lego sets saved.</p>
}
<button class="btn btn-danger" @onclick="ClearSavedLegoSets" style="margin: 10px;">Clear Saved Lego Sets</button>

<hr style="border: 1px solid; margin: 20px 0;" />





<h4>Find Matching Lego Sets</h4>

<button @onclick="FindMatchingSets" class="btn btn-primary" style="margin: 10px;">Find Matching Sets</button>

@if (isLoadingMatches)
{
    <p>Loading sets, please wait...</p>
}

else if (hasMatched && matchingSets.Count == 0)
{
    <p>No matching Lego sets found.</p>
}
else if (hasMatched && matchingSets.Count > 0)
{
    <table class="table mt-3">
        <thead>
            <tr>
                <th>Set Number</th>
                <th>Name</th>
                <th>Number of Pieces</th>
                <th>Link</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var setWithParts in matchingSets)
            {
                <tr>
                    <td>@setWithParts.Set.set_num</td>
                    <td>@setWithParts.Set.name</td>
                    <td>@setWithParts.Set.num_parts</td>
                    <td>@setWithParts.Set.set_url</td>
                </tr>
            }
        </tbody>
    </table>
    @if (hasMoreMatchingSets)
    {
        <button class="btn btn-secondary" @onclick="LoadMoreMatchingSets" style="margin: 10px;">Load More Matches</button>
    }
    else
    {
        <p>No more matching sets found.</p>
    }
}






@code {
    private List<RebrickableLegoSetWithParts> setsWithParts = new List<RebrickableLegoSetWithParts>();
    private List<DbLegoSet> userLegoSets = new List<DbLegoSet>();
    private List<RebrickableLegoSetWithParts> allMatchingSets = new List<RebrickableLegoSetWithParts>();
    private string searchQuery;
    private bool isLoadingSearch = false;
    private bool hasSearched = false;
    private bool isLoadingMatches = false;
    private bool hasMatched = false;
    private bool isLoadingMore = false;
    private bool hasMoreSets = true;
    private bool isLoadingMoreMatches = false;
    private bool hasMoreMatchingSets = true;
    private int currentPage = 1;
    private int currentMatchingPage = 2;






    private async Task SearchLegoSets()   //this method is triggered when the user clicks the search button
    {
        isLoadingSearch = true;
        hasSearched = true;
        currentPage = 1;
        setsWithParts.Clear();
        hasMoreSets = true;

        var initialSets = await RebrickableService.FetchSetsAndPartsAsync(searchQuery, currentPage, 10);
        setsWithParts.AddRange(initialSets);

        if (initialSets.Count < 10)
        {
            hasMoreSets = false;
        }
        else //Preload next page silently in the background
        {
            var moreSets = await RebrickableService.FetchSetsAndPartsAsync(searchQuery, currentPage + 1, 10);
            if (moreSets.Count == 0)
            {
                hasMoreSets = false;
            }
        }
        Console.WriteLine($"[DEBUG] SearchLegoSets: loaded {initialSets.Count} sets. Has more sets: {hasMoreSets}"); 

        isLoadingSearch = false;

        await InvokeAsync(() => { });
        //StateHasChanged();
        await Task.Delay(1);

    }





    private async Task LoadMoreSets()
    {
        Console.WriteLine($"[DEBUG] LoadMoreSets called. Current page: {currentPage}, hasMoreSets: {hasMoreSets}");

        isLoadingMore = true;
        currentPage++;

        var moreSets = await RebrickableService.FetchSetsAndPartsAsync(searchQuery, currentPage + 1, 10);

        if (moreSets.Count < 10)
        {
            hasMoreSets = false;
        }
        else
        {
            setsWithParts.AddRange(moreSets);
        }

        isLoadingMore = false;
        StateHasChanged();
    }







    private async Task FindMatchingSets()
    {
        isLoadingMatches = true;
        currentMatchingPage = 2;
        matchingSets.Clear();
        hasMoreMatchingSets = true;

        var initialMatchingSets = await RebrickableService.FindMatchingSetsAsync(currentMatchingPage, 1000);
        matchingSets.AddRange(initialMatchingSets);

        if (initialMatchingSets.Count < 10)
        {
            hasMoreMatchingSets = false;
        }

        hasMatched = true;
        isLoadingMatches = false;
        StateHasChanged();

    }







    private async Task LoadMoreMatchingSets()
    {
        isLoadingMoreMatches = true;
        currentMatchingPage++;
        var moreMatchingSets = await RebrickableService.FindMatchingSetsAsync(currentMatchingPage, 1000);

        if (moreMatchingSets.Count == 0)
        {
            hasMoreMatchingSets = false;
        }
        else
        {
            matchingSets.AddRange(moreMatchingSets);
        }
        isLoadingMoreMatches = false;
        StateHasChanged();

    }








    private async Task SaveLegoSet(RebrickableLegoSetWithParts setWithParts)   //  block of code to use the SaveLegoSet method with the RebrickableLegoSetWithParts object.
    {
        var newLegoSet = new DbLegoSet
        {
            SetNum = setWithParts.Set.set_num,
            Name = setWithParts.Set.name,
            PieceCount = setWithParts.Set.num_parts
        };
        await DbContext.DbLegoSets.AddAsync(newLegoSet);
        await DbContext.SaveChangesAsync();            
        await LoadUserLegoSets();
    }








    private async Task DeleteLegoSet(DbLegoSet legoSet)   //DeleteLegoSet method is triggered when the user clicks the delete button, it deletes the Lego set and parts from the database.
    {
        var legoSetToDelete = await DbContext.DbLegoSets.FirstOrDefaultAsync(ls => ls.SetNum == legoSet.SetNum);
        if (legoSetToDelete != null)
        {
            var partsToDelete = await DbContext.DbLegoParts.Where(DbLegoPart => DbLegoPart.SetNum == legoSet.SetNum).ToListAsync();
            DbContext.DbLegoParts.RemoveRange(partsToDelete);

            DbContext.DbLegoSets.Remove(legoSetToDelete);

            await DbContext.SaveChangesAsync();
            await LoadUserLegoSets();
        }
    }









    private async Task LoadUserLegoSets()   //LoadUserLegoSets method is triggered when the user clicks the save button, it loads the Lego sets to the UI and to the database.
    {
        userLegoSets = await DbContext.DbLegoSets.ToListAsync();
    }






    private async Task ClearSavedLegoSets()   //ClearSavedLegoSets method is triggered when the user clicks the clear button, it clears the Lego sets and their parts from the UI and the database.

    {

        DbContext.DbLegoSets.RemoveRange(DbContext.DbLegoSets);
        DbContext.DbLegoParts.RemoveRange(DbContext.DbLegoParts);
        await DbContext.SaveChangesAsync();
        DbContext.ChangeTracker.Clear();
        await LoadUserLegoSets();
    }

    private List<RebrickableLegoSetWithParts> matchingSets = new();

   }