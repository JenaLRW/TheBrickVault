@using TheBrickVault.Components.Services
@using TheBrickVault.Core.Models
@using TheBrickVault.Infrastructure.Data
@using TheBrickVault.Core.DTO

@page "/"

@inject LegoDbContext DbContext
@inject RebrickableService RebrickableService


<h3>The Brick Vault</h3>
<h6>Jena White's Capstone Project</h6>
<h6>Code:You, August 2024 Cohort</h6>

<img src="images/Thebrickvaultlogo.png" alt="image of a chest full of colorful bricks" style="width: 200px; 
height: auto; place-content: left; padding: 10px;"/>


<h4> Search Lego Sets </h4>

<InputText @bind-Value="searchQuery" placeholder="Search by Set Number or Name" class="form-control" />
<button class="btn btn-primary" @onclick="SearchLegoSets" style="margin: 10px;">Search</button>

@if (setsWithParts != null && setsWithParts.Count > 0)
{
    <table class="table mt-3">
        <thead>
            <tr>
                <th>Save</th>
                <th>Set Number</th>
                <th>Name</th>
                <th>Number of Pieces</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var setWithParts in setsWithParts)
            {
                <tr>
                    <td>
                        <button @onclick="() => SaveLegoSet(setWithParts.Set)" class="btn btn-success btn-sm">
                            <i class="bi bi-save"></i> 

                        </button>
                    </td>
                    <td>@setWithParts.Set.set_num</td>
                    <td>@setWithParts.Set.name</td>
                    <td>@setWithParts.Set.num_parts</td>
                </tr>
            }
        </tbody>
    </table>
}

else if (searchPerformed && setsWithParts.Count == 0)
{
    <p>No Lego sets found.</p>
}

<h4> User's Lego Sets</h4>

@if (userLegoSets != null && userLegoSets.Count > 0)
{
    <table class="table mt-3">
        <thead>
            <tr>
                <th>Set Number</th>
                <th>Name</th>
                <th>Number of Pieces</th>
            </tr>
        </thead>

        <tbody>
            @foreach (var legoSet in userLegoSets)
            {
                <tr>
                    <td>@legoSet.SetNum</td>
                    <td>@legoSet.Name</td>
                    <td>@legoSet.PieceCount</td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <p>No Lego sets saved.</p>
}
<button class="btn btn-danger" @onclick="ClearSavedLegoSets" style="margin: 10px;">Clear Saved Lego Sets</button>

@code {
    private List<RebrickableLegoSetWithParts> setsWithParts = new List<RebrickableLegoSetWithParts>();
    private List<DbLegoSet> userLegoSets = new List<DbLegoSet>();
    private string searchQuery;
    private bool searchPerformed = false;

    private async Task SearchLegoSets()
    {
        searchPerformed = true;
        if (!string.IsNullOrWhiteSpace(searchQuery))
        {
            setsWithParts = await RebrickableService.FetchSetsAndPartsAsync(searchQuery);
        }
        else
        {
            setsWithParts.Clear();
        }
    }

    private async Task SaveLegoSet(RebrickableLegoSet legoSet)
    {
        var newLegoSet = new DbLegoSet
        {
            SetNum = legoSet.set_num,
            Name = legoSet.name,
            PieceCount = legoSet.num_parts
        };
        await DbContext.DbLegoSets.AddAsync(newLegoSet);
        await DbContext.SaveChangesAsync();
        await LoadUserLegoSets(); 
    }
    
    private async Task LoadUserLegoSets()
    {
        userLegoSets = await DbContext.DbLegoSets.ToListAsync();
    }
    private async Task ClearSavedLegoSets()
    {
        DbContext.DbLegoSets.RemoveRange(DbContext.DbLegoSets);
        await DbContext.SaveChangesAsync();
        await LoadUserLegoSets();
    }
}