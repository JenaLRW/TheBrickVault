// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TheBrickVault.Infrastructure.Data;

#nullable disable

namespace TheBrickVault.Migrations
{
    [DbContext(typeof(LegoDbContext))]
    [Migration("20250331052121_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.2");

            modelBuilder.Entity("TheBrickVault.Core.Models.DbLegoPart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("DbLegoSetId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("InvPartId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PartNum")
                        .HasColumnType("TEXT");

                    b.Property<int?>("Quantity")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SetNum")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DbLegoSetId");

                    b.ToTable("DbLegoParts");
                });

            modelBuilder.Entity("TheBrickVault.Core.Models.DbLegoSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Images")
                        .HasColumnType("TEXT");

                    b.Property<int?>("Instructions")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int?>("PartsList")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("PieceCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SetNum")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("DbLegoSets");
                });

            modelBuilder.Entity("TheBrickVault.Core.Models.Imported_Inventories", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("set_num")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("set_num1")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("version")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("set_num");

                    b.HasIndex("set_num1");

                    b.ToTable("ImportedInventories");
                });

            modelBuilder.Entity("TheBrickVault.Core.Models.Imported_inventory_parts", b =>
                {
                    b.Property<int>("inventory_id")
                        .HasColumnType("INTEGER");

                    b.Property<int>("part_num")
                        .HasColumnType("INTEGER");

                    b.Property<int>("InventoryId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("part_num1")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("quantity")
                        .HasColumnType("INTEGER");

                    b.HasKey("inventory_id", "part_num");

                    b.HasIndex("InventoryId");

                    b.HasIndex("part_num");

                    b.HasIndex("part_num1");

                    b.ToTable("ImportedInventoryParts");
                });

            modelBuilder.Entity("TheBrickVault.Core.Models.Imported_inventory_sets", b =>
                {
                    b.Property<int>("inventory_id")
                        .HasColumnType("INTEGER");

                    b.Property<string>("set_num")
                        .HasColumnType("TEXT");

                    b.Property<int>("InventoryId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("quantity")
                        .HasColumnType("INTEGER");

                    b.Property<string>("set_num1")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("inventory_id", "set_num");

                    b.HasIndex("InventoryId");

                    b.HasIndex("set_num");

                    b.HasIndex("set_num1");

                    b.ToTable("ImportedInventorySets");
                });

            modelBuilder.Entity("TheBrickVault.Core.Models.Imported_parts", b =>
                {
                    b.Property<int>("part_num")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("name")
                        .HasColumnType("TEXT");

                    b.Property<string>("part_cat_id")
                        .HasColumnType("TEXT");

                    b.Property<string>("part_material")
                        .HasColumnType("TEXT");

                    b.HasKey("part_num");

                    b.ToTable("ImportedParts");
                });

            modelBuilder.Entity("TheBrickVault.Core.Models.Imported_sets", b =>
                {
                    b.Property<string>("set_num")
                        .HasColumnType("TEXT");

                    b.Property<string>("img_url")
                        .HasColumnType("TEXT");

                    b.Property<string>("name")
                        .HasColumnType("TEXT");

                    b.Property<int?>("num_parts")
                        .HasColumnType("INTEGER");

                    b.Property<string>("theme_id")
                        .HasColumnType("TEXT");

                    b.Property<int?>("year")
                        .HasColumnType("INTEGER");

                    b.HasKey("set_num");

                    b.ToTable("ImportedSets");
                });

            modelBuilder.Entity("TheBrickVault.Core.Models.DbLegoPart", b =>
                {
                    b.HasOne("TheBrickVault.Core.Models.DbLegoSet", null)
                        .WithMany("ListOfParts")
                        .HasForeignKey("DbLegoSetId");
                });

            modelBuilder.Entity("TheBrickVault.Core.Models.Imported_Inventories", b =>
                {
                    b.HasOne("TheBrickVault.Core.Models.Imported_sets", null)
                        .WithMany()
                        .HasForeignKey("set_num")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TheBrickVault.Core.Models.Imported_sets", "Set")
                        .WithMany("Inventories")
                        .HasForeignKey("set_num1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Set");
                });

            modelBuilder.Entity("TheBrickVault.Core.Models.Imported_inventory_parts", b =>
                {
                    b.HasOne("TheBrickVault.Core.Models.Imported_Inventories", "Inventory")
                        .WithMany("InventoryParts")
                        .HasForeignKey("InventoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TheBrickVault.Core.Models.Imported_Inventories", null)
                        .WithMany()
                        .HasForeignKey("inventory_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TheBrickVault.Core.Models.Imported_parts", null)
                        .WithMany()
                        .HasForeignKey("part_num")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TheBrickVault.Core.Models.Imported_parts", "Part")
                        .WithMany("InventoryParts")
                        .HasForeignKey("part_num1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Inventory");

                    b.Navigation("Part");
                });

            modelBuilder.Entity("TheBrickVault.Core.Models.Imported_inventory_sets", b =>
                {
                    b.HasOne("TheBrickVault.Core.Models.Imported_Inventories", "Inventory")
                        .WithMany("InventorySets")
                        .HasForeignKey("InventoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TheBrickVault.Core.Models.Imported_Inventories", null)
                        .WithMany()
                        .HasForeignKey("inventory_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TheBrickVault.Core.Models.Imported_sets", null)
                        .WithMany()
                        .HasForeignKey("set_num")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TheBrickVault.Core.Models.Imported_sets", "Set")
                        .WithMany("InventorySets")
                        .HasForeignKey("set_num1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Inventory");

                    b.Navigation("Set");
                });

            modelBuilder.Entity("TheBrickVault.Core.Models.DbLegoSet", b =>
                {
                    b.Navigation("ListOfParts");
                });

            modelBuilder.Entity("TheBrickVault.Core.Models.Imported_Inventories", b =>
                {
                    b.Navigation("InventoryParts");

                    b.Navigation("InventorySets");
                });

            modelBuilder.Entity("TheBrickVault.Core.Models.Imported_parts", b =>
                {
                    b.Navigation("InventoryParts");
                });

            modelBuilder.Entity("TheBrickVault.Core.Models.Imported_sets", b =>
                {
                    b.Navigation("Inventories");

                    b.Navigation("InventorySets");
                });
#pragma warning restore 612, 618
        }
    }
}
